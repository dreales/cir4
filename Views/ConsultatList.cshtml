@inherits Umbraco.Web.Mvc.UmbracoTemplatePage<ContentModels.ConsultatList>
@using ContentModels = Umbraco.Web.PublishedContentModels;
@{
  Layout = "Master.cshtml";
  List<IPublishedContent> consultants = new List<IPublishedContent>(Umbraco.Content(1155).Children().Where("Visible"));
  string consultantsJson = "";
  List<IPublishedContent> specialities = new List<IPublishedContent>(Umbraco.Content(1154).Children().Where("Visible"));
  string  specialitiesJson = "\"";
  foreach (var speciality in specialities){
    specialitiesJson += speciality.Name  + "\",\"";
  }
  specialitiesJson += "\"";
  var i = -1;
}
<div class="maincontent">
  <div class="container">
    <form class="form-inline">
      <div class="form-group mx-sm-2 mb-2">
        <label for="searchName" class="sr-only">Search by name</label>
        <input type="text" class="form-control typeahead" id="searchName" placeholder="Search by name..." />
      </div>
      <div class="form-group mx-sm-2 mb-2">
        <label for="searchSpeciality" class="sr-only">Search by speciality</label>
        <input type="text" class="form-control typeahead" id="searchSpeciality" placeholder="Search by speciality..." />
      </div>
      <div class="form-group mx-sm-2 mb-2">
        <label for="selectLocation">Select location</label>
        <select class="form-control" id="selectLocation">
          <option value=" ">All locations</option>
          <option value="Bath">Circle Bath Hospital</option>
          <option Value="Nottingham">Circle Nottingham</option>
          <option value="Reading">Circle Reading Hospital</option>
        </select>
      </div>
      <div class="form-group mx-sm-2 mb-2">
        <button type="submit" onclick="sort();">Update results</button>
      </div>
    </form>
  </div>
  <div class="consultants">
    <div class="container">
      <div class="row">
        @foreach(var consultant in consultants){
          ++i;
          string image = "";
          if(consultant.HasValue("profileImage")){
            image = (string)consultant.GetPropertyValue<IPublishedContent>("profileImage").GetCropUrl("thumb");
          }
          string customSpeciality = (string)consultant.GetPropertyValue("customSpeciality");
          var theseSpecialities = consultant.GetPropertyValue<IEnumerable<IPublishedContent>>("specialities");
          string specialityString = "";
          foreach (var speciality in theseSpecialities){
            specialityString += speciality.Name.Replace(" ","") + " ";
          }
          string location = (string)consultant.GetPropertyValue("location");
          consultantsJson += "{n:\"" + consultant.Name + "\",l:\"" + location + "\",u:\"" + consultant.Url + "\"},";
          <div class="col-md-4 @specialityString @location ">
            <a href="@consultant.Url">
              <img src="@image" alt="@consultant.Name is a @customSpeciality at Circle @location" />
              <div>
                <h3 class="normal">@consultant.Name</h3>
                <p class="smaller">@customSpeciality</p>
                <p class="smaller">Circle @location</p>
              </div>
            </a>
          </div>
        }
      </div>
    </div>
  </div>
</div>
<script src="https://twitter.github.io/typeahead.js/releases/latest/typeahead.jquery.js"></script>
<script>
var consultants=[ @Html.Raw(consultantsJson) ],specialities=[ @Html.Raw(specialitiesJson) ],names=[],map={},spec=false,loc=false;
$.each(consultants,function(i,c){map[c.n]=c;names.push(c.n);});
var sort = function(){
  console.log(0);
};
var matcher = function(ss){
  return function findMatches(q,cb){
    var m=[],sr=new RegExp(q,'i');
    $.each(ss,function(i,s){if(sr.test(s))m.push(s);});
    cb(m);
  };
};
var search = function(a,b){
  var class;
  $('.consultants .col-md-4').css('display','none');
  if(a&&loc){
    class=a+'.'+loc;
    spec=a;
  }else if(b&&spec){
    class=b;
    loc=b;
  } else if(a){
    class=a;
    spec=a;
  } else if(b){
    class=b;
    spec=b;
  }else{
    console.log('Search error');
    class="";
  }
  $('.consultants .col-md-4.'+class).css('display','block');
}
$('#searchName').typeahead({hint:true,highlight:true,minLength:2},{source:matcher(names)}).bind('typeahead:select',function(e,o){window.location.href='https://richs-unassuming-otter.s1.umbraco.io/'+map[o].u;});
$('#searchSpeciality').typeahead({hint:true,highlight:true,minLength:2},{source:matcher(specialities)}).bind('typeahead:select',function(e,o){
  $('.consultants .col-md-4').css('display','none');
  $('.consultants .col-md-4.'+o.replace(/\s+/g,'')).css('display','block');
});
$('#selectLocation').change(function(){
  $('.consultants .col-md-4').css('display','none');
  $('.consultants .col-md-4.'+$('#selectLocation').val()).css('display','block');
});
</script>
<style>
.tt-dropdown-menu{max-height:150px;overflow-y:auto}
</style>